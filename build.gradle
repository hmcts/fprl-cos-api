plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.5.1'
  id 'org.owasp.dependencycheck' version '6.2.1'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'org.sonarqube' version '3.2.0'
  id 'au.com.dius.pact' version '4.1.8'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
//  this should be uncommented eventually. I don't know why it was failing and that's why I commented it out for now.
//  executionData(test, integration)
//  reports {
//    xml.enabled = true
//    csv.enabled = false
//    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
//  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Family Private Law :: fprl-cos"
    property "sonar.projectKey", "uk.gov.hmcts.reform:fprl-cos"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

task contract(type: Test) {
  group = 'Delivery pipeline'
  description = 'Runs the consumer Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/fprl/client/**"
  systemProperty 'pact.rootDir', "pacts"
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task runAndPublishConsumerPactTests(type: Test){
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

def versions = [
  guava           : '30.1.1-jre',
  jackson         : '2.12.3',
  junit           : '5.7.2',
  junitPlatform   : '1.7.2',
  lombok          : '1.18.18',
  feignHttpClient : '10.3.0',
  pact_version    : '4.1.11',
  reformLogging   : '5.1.7',
  springBoot      : springBoot.class.package.implementationVersion,
  springfoxSwagger: '3.0.0',
  tomcat          : '10.0.6'
]

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.69'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: versions.guava) {
      entry 'guava'
    }

    dependencySet(
      group: 'com.fasterxml.jackson.core',
      version: versions.jackson
    ) {
      entry 'jackson-core'
      entry 'jackson-databind'
    }
    dependencySet(
      group: 'com.fasterxml.jackson.datatype',
      version: versions.jackson
    ) {
      entry 'jackson-datatype-jdk8'
      entry 'jackson-datatype-jsr310'
    }
    dependencySet(
      group: 'com.fasterxml.jackson.module',
      version: versions.jackson
    ) {
      entry 'jackson-module-parameter-names'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {

  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.8.RELEASE'
  implementation 'junit:junit:4.13.1'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient

  implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.1.2')
    {
      exclude group: 'io.reactivex', module: 'io.reactivex'
      exclude group: 'io.reactivex', module: 'rxnetty'
      exclude group: 'io.reactivex', module: 'rxnetty-contexts'
      exclude group: 'io.reactivex', module: 'rxnetty-servo'
    }

  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
  compile group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.14.1'

  compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcat
  compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcat

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  functionalTestImplementation sourceSets.main.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath

  contractTestCompile group: 'com.google.guava', name: 'guava', version: versions.guava
  contractTestCompile group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestCompile group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
  contractTestRuntime group: 'com.google.guava', name: 'guava', version: versions.guava
  contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

  contractTestCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
  contractTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  contractTestCompile("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
  contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")
  contractTestImplementation("org.junit.jupiter:junit-jupiter-api:${versions.junit}")

  contractTestCompile sourceSets.main.runtimeClasspath
  contractTestCompile sourceSets.test.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.demo.Application'

bootJar {
  getArchiveFileName().set(provider {
    'spring-boot-template.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
